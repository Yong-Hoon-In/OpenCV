#include <opencv2/opencv.hpp>
#include <iostream>



using namespace cv;
using namespace std;
String face_cascade = "C:/Users/Unlimited/downloads/opencv/sources/data/haarcascades/haarcascade_frontalface_alt.xml";
String eye_cascade = "C:/Users/Unlimited/Downloads/opencv/sources/data/haarcascades/haarcascade_eye.xml";
String img_name = "lena.jpg";
CascadeClassifier face;
CascadeClassifier eye;
int main()
{
	Mat img = imread(img_name);
	if (img.data == NULL) {
		cout << img_name << "이미지 열기 실패" << endl;
		return -1;
	}
	if (!face.load(face_cascade) || !eye.load(eye_cascade)) {
		cout<<"Cascade 파일 열기 실패"<<endl;
		return -1;
	}
#pragma region 얼굴 검출
	Mat gray;
	cvtColor(img, gray, COLOR_RGB2GRAY);//변환
	vector<Rect> face_pos;
	face.detectMultiScale(gray, face_pos, 1.1, 3, 0 | 2, Size(10, 10));//얼굴검출
	/*void CascadeClassifier::detectMultiScale(const Mat& image, vector<Rect>& objects, double scaleFactor=1.1,
	 int minNeighbors=3, int flags=0, Size minSize=Size(), Size maxSize=Size())*/
	for (int i = 0; i < (int)face_pos.size(); i++) {
		rectangle(img, face_pos[i], Scalar(0, 255, 0), 2);//사각형 그리기
	}
#pragma endregion

#pragma region 눈 검출
	for (int i = 0; i < (int)face_pos.size(); i++) {
		vector<Rect> eye_pos;
		Mat roi = gray(face_pos[i]);
		eye.detectMultiScale(roi, eye_pos, 1.1, 3, 0 | 2, Size(10, 10));
		for (int j = 0; j < (int)eye_pos.size(); j++) {
			Point center(face_pos[i].x + eye_pos[j].x + (eye_pos[j].width / 2), face_pos[i].y + eye_pos[j].y + (eye_pos[j].height / 2));
			int radius = cvRound((eye_pos[j].width + eye_pos[j].height)*0.2);
			circle(img, center, radius, Scalar(0, 0, 255), 2);
		}
	}
#pragma endregion
	namedWindow("검출");
	imshow("검출", img);
	waitKey();
	return 0;
}

